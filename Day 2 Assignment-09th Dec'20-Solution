{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled48.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNGwEoGEKUaOJf5qxpZQnvW",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/harishvenkatram/Lets-Upgrade-Python-Essentials-Program-Dec-20/blob/main/Day%202%20Assignment-09th%20Dec'20-Solution\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WkYiezysCYkX",
        "outputId": "6dc07ee8-16d3-49da-f2ca-8012635e6c69"
      },
      "source": [
        "#Question 1\r\n",
        "#Try 5 Different functions of the String in Python.\r\n",
        "#For example - index, split function.\r\n",
        "\r\n",
        "#Solution\r\n",
        "#Function 1 - Concatenation of Two or More Strings\r\n",
        "str1 = 'Hello'\r\n",
        "str2 ='World!'\r\n",
        "# using +\r\n",
        "print('str1 + str2 = ', str1 + str2)\r\n",
        "# using *\r\n",
        "print('str1 * 3 =', str1 * 3)\r\n",
        "\r\n",
        "str3 = 'Hello World!'\r\n",
        "#Function 2 - enumerate()\r\n",
        "list_enumerate = list(enumerate(str3))\r\n",
        "print('list(enumerate(str3) = ', list_enumerate)\r\n",
        "\r\n",
        "#Function 3 - character count\r\n",
        "print('len(str3) = ', len(str3))\r\n",
        "\r\n",
        "#Function 4 - Upper and Lower Case\r\n",
        "print(str3.lower())\r\n",
        "print(str3.upper())\r\n",
        "\r\n",
        "#Funtcion 5 - split\r\n",
        "print(str3.split())\r\n"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "str1 + str2 =  HelloWorld!\n",
            "str1 * 3 = HelloHelloHello\n",
            "list(enumerate(str3) =  [(0, 'H'), (1, 'e'), (2, 'l'), (3, 'l'), (4, 'o'), (5, ' '), (6, 'W'), (7, 'o'), (8, 'r'), (9, 'l'), (10, 'd'), (11, '!')]\n",
            "len(str3) =  12\n",
            "hello world!\n",
            "HELLO WORLD!\n",
            "['Hello', 'World!']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bju47rBECi1u",
        "outputId": "dff092d4-e797-478f-a6de-0ab9736cc161"
      },
      "source": [
        "#Question 2\r\n",
        "#Try 5 Different functions of the List object in Python\r\n",
        "\r\n",
        "#Solution\r\n",
        "\r\n",
        "my_list = ['p','y','t','h','o','n']\r\n",
        "\r\n",
        "#Function 1 - List indexing\r\n",
        "print(my_list[0])\r\n",
        "print(my_list[2])\r\n",
        "print(my_list[4])\r\n",
        "\r\n",
        "#Function 2 - Negative indexing\r\n",
        "print(my_list[-1])\r\n",
        "\r\n",
        "#Function 3 - Slicing\r\n",
        "print(my_list[:-1])\r\n",
        "print(my_list[::-1])\r\n",
        "\r\n",
        "#Function 4 - Appending and Extending\r\n",
        "my_list.append('a')\r\n",
        "print(my_list)\r\n",
        "my_list.extend(['b','c'])\r\n",
        "print(my_list)\r\n",
        "\r\n",
        "#Function 5 - Deleting list items\r\n",
        "del my_list[1:5]\r\n",
        "print(my_list)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "p\n",
            "t\n",
            "o\n",
            "n\n",
            "['p', 'y', 't', 'h', 'o']\n",
            "['n', 'o', 'h', 't', 'y', 'p']\n",
            "['p', 'y', 't', 'h', 'o', 'n', 'a']\n",
            "['p', 'y', 't', 'h', 'o', 'n', 'a', 'b', 'c']\n",
            "['p', 'n', 'a', 'b', 'c']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AyjHiFrDSMsa",
        "outputId": "bd31d36b-90ee-41f6-9a27-64c8d708414f"
      },
      "source": [
        "#Question 3\r\n",
        "#Experiment with at least 5 default functions of Dictionary\r\n",
        "\r\n",
        "#Solution\r\n",
        "\r\n",
        "my_dict = dict({1:'Lets',2:'Upgrade',3:'Python'})\r\n",
        "\r\n",
        "#Function 1 - Accessing Elements from Dictionary\r\n",
        "\r\n",
        "print(my_dict.get(1))\r\n",
        "\r\n",
        "#Function 2 - Changing and Adding Dictionary elements\r\n",
        "\r\n",
        "my_dict[1] = 'Let'\r\n",
        "print(my_dict)\r\n",
        "\r\n",
        "my_dict[4] = 'Essentials'\r\n",
        "print(my_dict)\r\n",
        "\r\n",
        "#Function 3 - Removing elements from Dictionary\r\n",
        "\r\n",
        "print(my_dict.pop(4))\r\n",
        "\r\n",
        "#Function 4 - Membership Test for Dictionary Keys\r\n",
        "\r\n",
        "print(4 not in my_dict)\r\n",
        "\r\n",
        "#Function 5 - Lenght of Dictionary\r\n",
        "\r\n",
        "print(\"Length of the Dictionary is \", len(my_dict))"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Lets\n",
            "{1: 'Let', 2: 'Upgrade', 3: 'Python'}\n",
            "{1: 'Let', 2: 'Upgrade', 3: 'Python', 4: 'Essentials'}\n",
            "Essentials\n",
            "True\n",
            "Length of the Dictionary is  3\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}